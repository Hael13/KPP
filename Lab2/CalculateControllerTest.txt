package com.example;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.springframework.util.Assert;

import static java.lang.Math.random;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculateControllerTest {
    private CalculateController for_test;

    @Test
    public void calculateZeroZeroTest() {
        Calculate res;
        for_test = new CalculateController();
        res = for_test.calculate("0", "0");
        Assertions.assertEquals(0, res.getmodule());
        Assertions.assertEquals(1.57, res.getphase());
    }

    @Test
    public void calculateZeroCompl()
    {

        Calculate res;
        for_test = new CalculateController();
        double real=Math.random();
        res = for_test.calculate(String.valueOf(real), "0");
        Assertions.assertEquals(real, res.getmodule());
        Assertions.assertEquals(0, res.getphase());
    }

    @Test
    public void calculateZeroReal()
    {
        Calculate res;
        for_test = new CalculateController();
        double compl=Math.random();
        res = for_test.calculate("0", String.valueOf(compl));
        Assertions.assertEquals(compl, res.getmodule());
        Assertions.assertEquals(1.57, res.getphase());
    }

    @Test
    public void calculateTest()
    {
        Calculate res, expect;
        double real=Math.random();
        double compl=Math.random();
        expect=new Calculate(real, compl);
        for_test=new CalculateController();
        res=for_test.calculate(Double.toString(real), Double.toString(compl));
        Assertions.assertEquals(expect.getmodule(), res.getmodule());
        Assertions.assertEquals(expect.getphase(), res.getphase());
    }

    @Test
    public void calculateFailTest() {
        for_test = new CalculateController();
        Assertions.assertThrows(NumberFormatException.class, ()->{for_test.calculate(ArgumentMatchers.anyString(), ArgumentMatchers.anyString());});
    }
}
