package com.example;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@RestController
public class CalculateController {
    static private Logger logger=Logger.getLogger(CalculateController.class);
    @Autowired
    private Counter count;
    @Autowired
    private Cache cache;

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(NumberFormatException.class)
    public @ResponseBody
    Error_info FormatError(HttpServletRequest req, NumberFormatException is_no_number) {
        logger.error("Invalid input");
        return new Error_info(HttpStatus.BAD_REQUEST, is_no_number.getMessage());
    }

    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler(Throwable.class)
    public @ResponseBody Error_info UncheckedError(Throwable unchecked)
    {
        logger.error("Server error");
        return new Error_info(HttpStatus.INTERNAL_SERVER_ERROR, unchecked.getMessage());
    }

    public Calculate work(Request req)
    {
        Calculate res;
        CacheElement cacheResult;
        logger.info("Get parameters: "+req.getReal()+" "+req.getComp());
        double r, c;
        r=req.getReal();
        c=req.getComp();

        cacheResult=this.cache.find(Double.toString(r), Double.toString(c));
        if(cacheResult==null) {
            logger.info("No in cache");
            String key=Double.toString(r)+" "+Double.toString(c);
            res=new Calculate(r, c);
            this.cache.add(key, res);
        }
        else {
            logger.info("Finded in cache");
            res=cacheResult.getRes();
            cacheResult.inc();
        }
        return res;
    }

    @PostMapping(value="/calculate", consumes = "application/json", produces = "application/json")
    @ResponseBody
    public Response calculate(@RequestBody ArrayList<Request> req) throws NumberFormatException {

        this.count.increment();
        ArrayList<Calculate> res;
        res=new ArrayList<Calculate>();
        Stream<Request> stream=req.stream();
        stream.forEach((current)->{res.add(this.work(current));});

        Stream<Calculate> responceStream=res.stream().distinct();
        Calculate max=responceStream.max((a, b)->{return (int)(a.getmodule()-b.getmodule());}).get();

        responceStream=res.stream().distinct();
        Calculate min=responceStream.min((a, b)->{return (int)(a.getmodule()-b.getmodule());}).get();

        Calculate popular=this.cache.findMostPopular();

        Response result= new Response(res.size(), max, min, popular, res);

        return result;
    }

    @GetMapping("/calculate")
    @ResponseBody
    public ArrayList<Calculate> calculate(@RequestParam(value = "real") ArrayList<String> real, @RequestParam(value = "comp") ArrayList<String> comp) throws NumberFormatException {

        this.count.increment();
        ArrayList<Calculate> res;
        ArrayList<Request> reqList;
        reqList=new ArrayList<>();
        res=new ArrayList<>();
        int i, len1, len2;
        len1=real.size();
        len2=comp.size();
        for(i=0; i<len1 && i<len2; i++) {
            reqList.add(new Request(real.get(i), comp.get(i)));
        }

        for(; i<len1; i++) {
            reqList.add(new Request(real.get(i), "0"));
        }

        for(; i<len2; i++) {
            reqList.add(new Request("0", comp.get(i)));
        }

        Stream<Request> stream=reqList.stream();
        stream.forEach((x)->{res.add(this.work(x));});

        return res;
    }

    @GetMapping("/response")
    @ResponseBody
    public String getResponse() {
        return "Common request: "+this.count.toString();
    }

}
