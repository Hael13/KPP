import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;

@RestController
public class CalculateController {
    static private Logger logger=Logger.getLogger(CalculateController.class);
    @Autowired
    private Counter count;
    @Autowired
    private Cache cache;

    public CalculateController(){}

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(NumberFormatException.class)
    public @ResponseBody
    Error_info FormatError(HttpServletRequest req, NumberFormatException is_no_number) {
        logger.error("Invalid input");
        return new Error_info(HttpStatus.BAD_REQUEST, is_no_number.getMessage());
    }

    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler(Throwable.class)
    public @ResponseBody Error_info UncheckedError(Throwable unchecked)
    {
        logger.error("Server error");
        return new Error_info(HttpStatus.INTERNAL_SERVER_ERROR, unchecked.getMessage());
    }

    @GetMapping("/calculate")
    @ResponseBody
    public Calculate calculate(@RequestParam(value = "real", defaultValue = "0") String real, @RequestParam(value = "comp", defaultValue = "0") String comp) throws NumberFormatException {

        this.count.increment();
        Calculate res;
        logger.info("Get parameters: "+real+" "+comp);
        double r, c;

        try {
            r = Double.valueOf(real);
            c = Double.valueOf(comp);
        }
        catch (NumberFormatException ex) {
           throw new NumberFormatException("Error: Invalid input");
        }

        res=this.cache.find(real, comp);
        if(res==null) {
            logger.info("No in cache");
            String key=real+" "+comp;
            res=new Calculate(r, c);
            this.cache.add(key, res);
        }
        else {
            logger.info("Finded in cache");
        }
        return res;
    }

    @GetMapping("/response")
    @ResponseBody
    public String getResponse() {
        return "Common request: "+this.count.toString();
    }

}
